<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport">
    <title>LOW POLY（图片三角化）</title>
    <style>
          #upload {
            display: block;
            margin: 10px ;
            height: 50px;
            width: 220px;
            text-align: center;   
            line-height: 50px;
            border: 6px solid;
            border-color: #667db6;          
        }

        .touch {
            background-color: #ddd;
        }

        #files {
            display: none
        }

        #box {
            position: relative;
            width: 49%
        }

        canvas {
            width:  100%;
            height: auto;
        }

        .loading {
            position: absolute;
            display: none;
            width: 100%;
            height: 30px;
            line-height: 40px;
            text-align: center;
            top: 0;
            bottom: 0;
            margin: auto;
            font-size: 50px;
            color: #FFF;
        }

        .showloading .loading {
            display: block;
        }

        .settings-form {
           bottom: 520px;
            text-align: left;
            position: absolute;
            display: block;
            margin-left: 280px;
            margin-right: 2px;
            padding-left: 10px;
            padding-right: 10px;
            padding-top: 4px;
            padding-bottom: 4px;
            border: 3px solid;
          
           
        }



        input{
            -webkit-writing-mode: horizontal-tb !important;
            text-rendering: auto;
            color: -internal-light-dark(black, white);
            letter-spacing: normal;
            word-spacing: normal;
            text-transform: none;
            text-indent: 0px;
            text-shadow: none;
            display: inline-block;
            text-align: start;
            appearance: textfield;
            background-color: -internal-light-dark(rgb(255, 255, 255), rgb(59, 59, 59));
            -webkit-rtl-ordering: logical;
            cursor: text;
            margin: 0em;
            margin-bottom: 1rem;
            font: 400 13.3333px Arial;
            padding: 1px 2px;
            border-width: 2px;
            border-style: inset;
            border-color: -internal-light-dark(rgb(118, 118, 118), rgb(133, 133, 133));
            border-image: initial;
        }

        button {
            appearance: button;
            -webkit-writing-mode: horizontal-tb !important;
            text-rendering: auto;
            color: -internal-light-dark(black, white);
            letter-spacing: normal;
            word-spacing: normal;
            text-transform: none;
            text-indent: 0px;
            text-shadow: none;
            display: inline-block;
            text-align: center;
            align-items: flex-start;
            cursor: default;
            background-color: -internal-light-dark(rgb(239, 239, 239), rgb(59, 59, 59));
            box-sizing: border-box;
            margin: 0em;
            font: 400 13.3333px Arial;
            padding: 1px 6px;
            border-width: 2px;
            border-style: outset;
            border-color: -internal-light-dark(rgb(118, 118, 118), rgb(133, 133, 133));
            border-image: initial;
        }
        
        .img{
            width: 49%
        }
               
        img{
            width:  100%;
            height: auto;
        }
    </style>
</head>
<body>
<div>
    <a id="upload">UPLOAD YOUR IMAGE</a>
    <input type="file" id="files" accept="image/*"/>
</div>

<div style="display: flex; justify-content: space-between;"> 
<div id="box">
    <canvas id="cas"></canvas>
    <div class="loading">loading...</div>
</div>
<div class="img">
    <img id="img" />
</div>
</div>

<div class="settings-form">
    <label>Point Max Num:</label>
    <input type="range"  min="0" max="1000" id="POINT_MAX_NUM" value="300" step="10" onchange="change()">
    <span id="value">300</span>
</div>

<!--sobel.js-->
<script>
    (function(root) {
        'use strict';

        function Sobel(imageData) {
            if (!(this instanceof Sobel)) {
                return new Sobel(imageData);
            }

            var width = imageData.width;
            var height = imageData.height;

            var kernelX = [
                [-1,0,1],
                [-2,0,2],
                [-1,0,1]
            ];

            var kernelY = [
                [-1,-2,-1],
                [0,0,0],
                [1,2,1]
            ];

            var sobelData = [];
            var grayscaleData = [];

            function bindPixelAt(data) {
                return function(x, y, i) {
                    i = i || 0;
                    return data[((width * y) + x) * 4 + i];
                };
            }

            var data = imageData.data;
            var pixelAt = bindPixelAt(data);
            var x, y;

            for (y = 0; y < height; y++) {
                for (x = 0; x < width; x++) {
                    var r = pixelAt(x, y, 0);
                    var g = pixelAt(x, y, 1);
                    var b = pixelAt(x, y, 2);

                    var avg = (r + g + b) / 3;
                    grayscaleData.push(avg, avg, avg, 255);
                }
            }

            pixelAt = bindPixelAt(grayscaleData);

            for (y = 0; y < height; y++) {
                for (x = 0; x < width; x++) {
                    var pixelX = (
                        (kernelX[0][0] * pixelAt(x - 1, y - 1)) +
                        (kernelX[0][1] * pixelAt(x, y - 1)) +
                        (kernelX[0][2] * pixelAt(x + 1, y - 1)) +
                        (kernelX[1][0] * pixelAt(x - 1, y)) +
                        (kernelX[1][1] * pixelAt(x, y)) +
                        (kernelX[1][2] * pixelAt(x + 1, y)) +
                        (kernelX[2][0] * pixelAt(x - 1, y + 1)) +
                        (kernelX[2][1] * pixelAt(x, y + 1)) +
                        (kernelX[2][2] * pixelAt(x + 1, y + 1))
                    );

                    var pixelY = (
                        (kernelY[0][0] * pixelAt(x - 1, y - 1)) +
                        (kernelY[0][1] * pixelAt(x, y - 1)) +
                        (kernelY[0][2] * pixelAt(x + 1, y - 1)) +
                        (kernelY[1][0] * pixelAt(x - 1, y)) +
                        (kernelY[1][1] * pixelAt(x, y)) +
                        (kernelY[1][2] * pixelAt(x + 1, y)) +
                        (kernelY[2][0] * pixelAt(x - 1, y + 1)) +
                        (kernelY[2][1] * pixelAt(x, y + 1)) +
                        (kernelY[2][2] * pixelAt(x + 1, y + 1))
                    );

                    var magnitude = Math.sqrt((pixelX * pixelX) + (pixelY * pixelY))>>>0;

                    sobelData.push(magnitude, magnitude, magnitude, 255);
                }
            }

            var clampedArray = sobelData;

            if (typeof Uint8ClampedArray === 'function') {
                clampedArray = new Uint8ClampedArray(sobelData);
            }

            clampedArray.toImageData = function() {
                return Sobel.toImageData(clampedArray, width, height);
            };

            return clampedArray;
        }

        Sobel.toImageData = function toImageData(data, width, height) {
            if (typeof ImageData === 'function' && Object.prototype.toString.call(data) === '[object Uint16Array]') {
                return new ImageData(data, width, height);
            } else {
                if (typeof window === 'object' && typeof window.document === 'object') {
                    var canvas = document.createElement('canvas');

                    if (typeof canvas.getContext === 'function') {
                        var context = canvas.getContext('2d');
                        var imageData = context.createImageData(width, height);
                        imageData.data.set(data);
                        return imageData;
                    } else {
                        return new FakeImageData(data, width, height);
                    }
                } else {
                    return new FakeImageData(data, width, height);
                }
            }
        };

        function FakeImageData(data, width, height) {
            return {
                width: width,
                height: height,
                data: data
            };
        }

        if (typeof exports !== 'undefined') {
            if (typeof module !== 'undefined' && module.exports) {
                exports = module.exports = Sobel;
            }
            exports.Sobel = Sobel;
        } else if (typeof define === 'function' && define.amd) {
            define([], function() {
                return Sobel;
            });
        } else {
            root.Sobel = Sobel;
        }

    })(this);

</script>
<!--delaunay.js-->
<script>
    var Delaunay;

    (function() {
        "use strict";

        var EPSILON = 1.0 / 1048576.0;

        function supertriangle(vertices) {
            var xmin = Number.POSITIVE_INFINITY,
                ymin = Number.POSITIVE_INFINITY,
                xmax = Number.NEGATIVE_INFINITY,
                ymax = Number.NEGATIVE_INFINITY,
                i, dx, dy, dmax, xmid, ymid;

            for(i = vertices.length; i--; ) {
                if(vertices[i][0] < xmin) xmin = vertices[i][0];
                if(vertices[i][0] > xmax) xmax = vertices[i][0];
                if(vertices[i][1] < ymin) ymin = vertices[i][1];
                if(vertices[i][1] > ymax) ymax = vertices[i][1];
            }

            dx = xmax - xmin;
            dy = ymax - ymin;
            dmax = Math.max(dx, dy);
            xmid = xmin + dx * 0.5;
            ymid = ymin + dy * 0.5;

            return [
                [xmid - 20 * dmax, ymid -      dmax],
                [xmid            , ymid + 20 * dmax],
                [xmid + 20 * dmax, ymid -      dmax]
            ];
        }

        function circumcircle(vertices, i, j, k) {
            var x1 = vertices[i][0],
                y1 = vertices[i][1],
                x2 = vertices[j][0],
                y2 = vertices[j][1],
                x3 = vertices[k][0],
                y3 = vertices[k][1],
                fabsy1y2 = Math.abs(y1 - y2),
                fabsy2y3 = Math.abs(y2 - y3),
                xc, yc, m1, m2, mx1, mx2, my1, my2, dx, dy;

            /* Check for coincident points */
            if(fabsy1y2 < EPSILON && fabsy2y3 < EPSILON)
                throw new Error("Eek! Coincident points!");

            if(fabsy1y2 < EPSILON) {
                m2  = -((x3 - x2) / (y3 - y2));
                mx2 = (x2 + x3) / 2.0;
                my2 = (y2 + y3) / 2.0;
                xc  = (x2 + x1) / 2.0;
                yc  = m2 * (xc - mx2) + my2;
            }

            else if(fabsy2y3 < EPSILON) {
                m1  = -((x2 - x1) / (y2 - y1));
                mx1 = (x1 + x2) / 2.0;
                my1 = (y1 + y2) / 2.0;
                xc  = (x3 + x2) / 2.0;
                yc  = m1 * (xc - mx1) + my1;
            }

            else {
                m1  = -((x2 - x1) / (y2 - y1));
                m2  = -((x3 - x2) / (y3 - y2));
                mx1 = (x1 + x2) / 2.0;
                mx2 = (x2 + x3) / 2.0;
                my1 = (y1 + y2) / 2.0;
                my2 = (y2 + y3) / 2.0;
                xc  = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);
                yc  = (fabsy1y2 > fabsy2y3) ?
                    m1 * (xc - mx1) + my1 :
                    m2 * (xc - mx2) + my2;
            }

            dx = x2 - xc;
            dy = y2 - yc;
            return {i: i, j: j, k: k, x: xc, y: yc, r: dx * dx + dy * dy};
        }

        function dedup(edges) {
            var i, j, a, b, m, n;

            for(j = edges.length; j; ) {
                b = edges[--j];
                a = edges[--j];

                for(i = j; i; ) {
                    n = edges[--i];
                    m = edges[--i];

                    if((a === m && b === n) || (a === n && b === m)) {
                        edges.splice(j, 2);
                        edges.splice(i, 2);
                        break;
                    }
                }
            }
        }

        Delaunay = {
            triangulate: function(vertices, key) {
                var n = vertices.length,
                    i, j, indices, st, open, closed, edges, dx, dy, a, b, c;

                /* Bail if there aren't enough vertices to form any triangles. */
                if(n < 3)
                    return [];

                /* Slice out the actual vertices from the passed objects. (Duplicate the
                 * array even if we don't, though, since we need to make a supertriangle
                 * later on!) */
                vertices = vertices.slice(0);

                if(key)
                    for(i = n; i--; )
                        vertices[i] = vertices[i][key];

                /* Make an array of indices into the vertex array, sorted by the
                 * vertices' x-position. Force stable sorting by comparing indices if
                 * the x-positions are equal. */
                indices = new Array(n);

                for(i = n; i--; )
                    indices[i] = i;

                indices.sort(function(i, j) {
                    var diff = vertices[j][0] - vertices[i][0];
                    return diff !== 0 ? diff : i - j;
                });

                /* Next, find the vertices of the supertriangle (which contains all other
                 * triangles), and append them onto the end of a (copy of) the vertex
                 * array. */
                st = supertriangle(vertices);
                vertices.push(st[0], st[1], st[2]);

                /* Initialize the open list (containing the supertriangle and nothing
                 * else) and the closed list (which is empty since we havn't processed
                 * any triangles yet). */
                open   = [circumcircle(vertices, n + 0, n + 1, n + 2)];
                closed = [];
                edges  = [];

                /* Incrementally add each vertex to the mesh. */
                for(i = indices.length; i--; edges.length = 0) {
                    c = indices[i];

                    /* For each open triangle, check to see if the current point is
                     * inside it's circumcircle. If it is, remove the triangle and add
                     * it's edges to an edge list. */
                    for(j = open.length; j--; ) {
                        /* If this point is to the right of this triangle's circumcircle,
                         * then this triangle should never get checked again. Remove it
                         * from the open list, add it to the closed list, and skip. */
                        dx = vertices[c][0] - open[j].x;
                        if(dx > 0.0 && dx * dx > open[j].r) {
                            closed.push(open[j]);
                            open.splice(j, 1);
                            continue;
                        }

                        /* If we're outside the circumcircle, skip this triangle. */
                        dy = vertices[c][1] - open[j].y;
                        if(dx * dx + dy * dy - open[j].r > EPSILON)
                            continue;

                        /* Remove the triangle and add it's edges to the edge list. */
                        edges.push(
                            open[j].i, open[j].j,
                            open[j].j, open[j].k,
                            open[j].k, open[j].i
                        );
                        open.splice(j, 1);
                    }

                    /* Remove any doubled edges. */
                    dedup(edges);

                    /* Add a new triangle for each edge. */
                    for(j = edges.length; j; ) {
                        b = edges[--j];
                        a = edges[--j];
                        open.push(circumcircle(vertices, a, b, c));
                    }
                }

                /* Copy any remaining open triangles to the closed list, and then
                 * remove any triangles that share a vertex with the supertriangle,
                 * building a list of triplets that represent triangles. */
                for(i = open.length; i--; )
                    closed.push(open[i]);
                open.length = 0;

                for(i = closed.length; i--; )
                    if(closed[i].i < n && closed[i].j < n && closed[i].k < n)
                        open.push(closed[i].i, closed[i].j, closed[i].k);

                /* Yay, we're done! */
                return open;
            },
            contains: function(tri, p) {
                /* Bounding box test first, for quick rejections. */
                if((p[0] < tri[0][0] && p[0] < tri[1][0] && p[0] < tri[2][0]) ||
                    (p[0] > tri[0][0] && p[0] > tri[1][0] && p[0] > tri[2][0]) ||
                    (p[1] < tri[0][1] && p[1] < tri[1][1] && p[1] < tri[2][1]) ||
                    (p[1] > tri[0][1] && p[1] > tri[1][1] && p[1] > tri[2][1]))
                    return null;

                var a = tri[1][0] - tri[0][0],
                    b = tri[2][0] - tri[0][0],
                    c = tri[1][1] - tri[0][1],
                    d = tri[2][1] - tri[0][1],
                    i = a * d - b * c;

                /* Degenerate tri. */
                if(i === 0.0)
                    return null;

                var u = (d * (p[0] - tri[0][0]) - b * (p[1] - tri[0][1])) / i,
                    v = (a * (p[1] - tri[0][1]) - c * (p[0] - tri[0][0])) / i;

                /* If we're outside the tri, fail. */
                if(u < 0.0 || v < 0.0 || (u + v) > 1.0)
                    return null;

                return [u, v];
            }
        };

        if(typeof module !== "undefined")
            module.exports = Delaunay;
    })();
</script>
<script>

    var inputFile = document.getElementById("files");
    var canvas = document.getElementById("cas");
    var image = document.getElementById("img");
    var ctx = canvas.getContext("2d");

    var box = document.getElementById("box");
    var uplbtn = document.getElementById("upload");
    uplbtn.onclick = function() {inputFile.click();};
    uplbtn.ontouchstart = function() {this.className = "touch"};
    uplbtn.ontouchend = function() {this.className = ""};

   function change() {
         var value = document.getElementById('POINT_MAX_NUM').value ;
         document.getElementById('value').innerHTML = value;

         parse()
   }

    var img = null

    var jxdvalue = 50;      //精细度，值越小，图片越精细 Fineness, the smaller the value, the finer the picture

    
    window.οnresize=()=>{  
         console.log('------------')
    } 

    inputFile.onchange = function() {
        if (!this.files.length) return;

        var file = this.files[0];

        if (!/\/(?:jpeg|png)/i.test(file.type)) {
            alert("Images should be in JPG or PNG format");
            return;
        }

        var reader = new FileReader();
        reader.onload = function() {
            img = new Image();
            img.src = this.result;

            img.onload = function() {
                parse();
            }
        };
        reader.readAsDataURL(file);
    };

    function parse() {
        var particles = [];
        canvas.width = (img.width > 600) ? 600 : img.width;
        canvas.height = img.height * canvas.width / img.width;
        
        image.src = img.src

        image.height = img.height * canvas.width / img.width;
        image.width = (img.width > 600) ? 600 : img.width;

        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

        box.className = "showloading";

        setTimeout(function() {
            var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);

//          Collect edge pixel points with color values greater than 40
            var collectors = [];
            Sobel(imgData, function(value, x, y) {
                if (value > 40) {
                    collectors.push([x, y]);
                }
            });

            var POINT_MAX_NUM = Number(document.getElementById('POINT_MAX_NUM').value)
            // Add some random points
            for (var i = 0; i < POINT_MAX_NUM; i++) {
                particles.push([Math.random() * canvas.width, Math.random() * canvas.height]);
            }

//          Add random edge points, the number is the number of edge points divided by 50
            var length = ~~(collectors.length / jxdvalue), random;
            for (var l = 0; l < length; l++) {
                random = (Math.random() * collectors.length) << 0;
                particles.push(collectors[random]);
                collectors.splice(random, 1);
            }

//          Add four vertex coordinates
            particles.push([0, 0], [0, canvas.height], [canvas.width, 0], [canvas.width, canvas.height]);

//          Use delaunay triangulation to get triangular coordinates
            var triangles = Delaunay.triangulate(particles);

            var x1, x2, x3, y1, y2, y3, cx, cy;
            for (var i = 0; i < triangles.length; i += 3) {
                x1 = particles[triangles[i]][0];
                x2 = particles[triangles[i + 1]][0];
                x3 = particles[triangles[i + 2]][0];
                y1 = particles[triangles[i]][1];
                y2 = particles[triangles[i + 1]][1];
                y3 = particles[triangles[i + 2]][1];

//              Get the coordinates of the center point of the triangle
                cx = ~~((x1 + x2 + x3) / 3);
                cy = ~~((y1 + y2 + y3) / 3);

//              Get the color value of the center point coordinates
                var index = (cy * imgData.width + cx) * 4;
                var color_r = imgData.data[index];
                var color_g = imgData.data[index + 1];
                var color_b = imgData.data[index + 2];

//              Drawing triangles
                ctx.save();
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.lineTo(x3, y3);
                ctx.closePath();
                ctx.fillStyle = "rgba("+color_r+","+color_g+","+color_b+",1)";
                ctx.fill();
                ctx.restore();
            }
            box.className = "";
        }, 50);
    }
</script>
</body>
</html>
